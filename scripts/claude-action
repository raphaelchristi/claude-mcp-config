#!/bin/bash

# Claude Code Action CLI
# Global command to interact with Claude Code Actions

# Colors for output
GREEN='\033[0;32m'
BLUE='\033[0;34m'
RED='\033[0;31m'
YELLOW='\033[1;33m'
NC='\033[0m' # No Color

# GitHub repository information
REPO_OWNER=$(git config --get remote.origin.url | sed -n 's/.*github.com[:/]\([^/]*\)\/.*/\1/p')
REPO_NAME=$(git config --get remote.origin.url | sed -n 's/.*github.com[:/][^/]*\/\([^.]*\).*/\1/p')

# Function to show usage
show_usage() {
    echo -e "${BLUE}Claude Code Action CLI${NC}"
    echo -e "${GREEN}Usage:${NC}"
    echo -e "  claude-action <command> [options]"
    echo ""
    echo -e "${GREEN}Commands:${NC}"
    echo -e "  ${YELLOW}issue${NC} <title> <body>     Create an issue with @claude mention"
    echo -e "  ${YELLOW}pr-comment${NC} <pr> <msg>    Comment on a PR with @claude mention"
    echo -e "  ${YELLOW}implement${NC} <description>   Create issue asking Claude to implement a feature"
    echo -e "  ${YELLOW}fix${NC} <description>        Create issue asking Claude to fix a bug"
    echo -e "  ${YELLOW}review${NC} <pr-number>       Ask Claude to review a PR"
    echo -e "  ${YELLOW}help${NC}                     Show this help message"
    echo ""
    echo -e "${GREEN}Examples:${NC}"
    echo -e "  claude-action implement \"Add user authentication\""
    echo -e "  claude-action fix \"TypeError in dashboard component\""
    echo -e "  claude-action review 123"
    echo -e "  claude-action pr-comment 456 \"Can you improve this function?\""
}

# Check if gh CLI is installed
check_gh_cli() {
    if ! command -v gh &> /dev/null; then
        echo -e "${RED}Error: GitHub CLI (gh) is not installed.${NC}"
        echo -e "Install it with: ${YELLOW}sudo apt install gh${NC} or ${YELLOW}brew install gh${NC}"
        exit 1
    fi
    
    # Check if authenticated
    if ! gh auth status &> /dev/null; then
        echo -e "${RED}Error: Not authenticated with GitHub.${NC}"
        echo -e "Run: ${YELLOW}gh auth login${NC}"
        exit 1
    fi
}

# Create an issue with @claude mention
create_issue() {
    local title="$1"
    local body="@claude $2"
    
    echo -e "${BLUE}Creating issue with Claude mention...${NC}"
    
    issue_url=$(gh issue create \
        --title "$title" \
        --body "$body" \
        --repo "$REPO_OWNER/$REPO_NAME" \
        2>&1)
    
    if [ $? -eq 0 ]; then
        echo -e "${GREEN}✓ Issue created successfully!${NC}"
        echo -e "${BLUE}URL:${NC} $issue_url"
        echo -e "${YELLOW}Claude will respond to the issue shortly.${NC}"
    else
        echo -e "${RED}✗ Failed to create issue${NC}"
        echo "$issue_url"
        exit 1
    fi
}

# Comment on a PR with @claude mention
comment_on_pr() {
    local pr_number="$1"
    local comment="@claude $2"
    
    echo -e "${BLUE}Adding comment to PR #$pr_number...${NC}"
    
    gh pr comment "$pr_number" \
        --body "$comment" \
        --repo "$REPO_OWNER/$REPO_NAME"
    
    if [ $? -eq 0 ]; then
        echo -e "${GREEN}✓ Comment added successfully!${NC}"
        echo -e "${YELLOW}Claude will respond to the PR comment shortly.${NC}"
    else
        echo -e "${RED}✗ Failed to add comment${NC}"
        exit 1
    fi
}

# Main script logic
main() {
    # Check if we're in a git repository
    if ! git rev-parse --git-dir > /dev/null 2>&1; then
        echo -e "${RED}Error: Not in a git repository${NC}"
        exit 1
    fi
    
    # Check GitHub CLI
    check_gh_cli
    
    # Parse command
    case "$1" in
        "issue")
            if [ -z "$2" ] || [ -z "$3" ]; then
                echo -e "${RED}Error: Missing arguments${NC}"
                echo "Usage: claude-action issue <title> <body>"
                exit 1
            fi
            create_issue "$2" "$3"
            ;;
            
        "implement")
            if [ -z "$2" ]; then
                echo -e "${RED}Error: Missing description${NC}"
                echo "Usage: claude-action implement <description>"
                exit 1
            fi
            create_issue "Feature Request: $2" "Please implement the following feature:\n\n$2"
            ;;
            
        "fix")
            if [ -z "$2" ]; then
                echo -e "${RED}Error: Missing description${NC}"
                echo "Usage: claude-action fix <description>"
                exit 1
            fi
            create_issue "Bug Fix: $2" "Please fix the following issue:\n\n$2"
            ;;
            
        "review")
            if [ -z "$2" ]; then
                echo -e "${RED}Error: Missing PR number${NC}"
                echo "Usage: claude-action review <pr-number>"
                exit 1
            fi
            comment_on_pr "$2" "Please review this PR and provide feedback on:\n- Code quality\n- Best practices\n- Potential improvements\n- Security considerations"
            ;;
            
        "pr-comment")
            if [ -z "$2" ] || [ -z "$3" ]; then
                echo -e "${RED}Error: Missing arguments${NC}"
                echo "Usage: claude-action pr-comment <pr-number> <message>"
                exit 1
            fi
            comment_on_pr "$2" "$3"
            ;;
            
        "help"|"--help"|"-h"|"")
            show_usage
            ;;
            
        *)
            echo -e "${RED}Error: Unknown command '$1'${NC}"
            echo ""
            show_usage
            exit 1
            ;;
    esac
}

# Run main function
main "$@"